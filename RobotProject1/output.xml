<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.3 on win32)" generated="20190809 11:44:17.786" rpa="false">
<suite id="s1" name="RobotProject1" source="C:\Users\apoorva.b.agrawal\OneDrive - Accenture\Desktop\Development\RobotFramework\RobotFrameworkRED\RobotProject1">
<suite id="s1-s1" name="TestSuitesFolder" source="C:\Users\apoorva.b.agrawal\OneDrive - Accenture\Desktop\Development\RobotFramework\RobotFrameworkRED\RobotProject1\TestSuitesFolder">
<suite id="s1-s1-s1" name="TestSuite3" source="C:\Users\apoorva.b.agrawal\OneDrive - Accenture\Desktop\Development\RobotFramework\RobotFrameworkRED\RobotProject1\TestSuitesFolder\TestSuite3.robot">
<kw name="Connect" type="setup">
<tags>
<tag>TestDB</tag>
</tags>
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymssql</arg>
<arg>${DB_NAME}</arg>
<arg>${DB_USER_NAME}</arg>
<arg>${DB_USER_PASSWORD}</arg>
<arg>${DB_HOST}</arg>
<arg>${DB_PORT}</arg>
</arguments>
<msg timestamp="20190809 11:44:17.983" level="INFO">Connecting using : pymssql.connect(database=TestDB, user=testuser, password=test123, host=CPX-CMSUMI7OH6Y, port=1433) </msg>
<status status="PASS" starttime="20190809 11:44:17.943" endtime="20190809 11:44:18.049"></status>
</kw>
<status status="PASS" starttime="20190809 11:44:17.943" endtime="20190809 11:44:18.049"></status>
</kw>
<test id="s1-s1-s1-t1" name="Insert a Record">
<kw name="Get Input Data">
<tags>
<tag>TestDB</tag>
</tags>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>Enter Data</arg>
</arguments>
<assign>
<var>${dataToLoad}</var>
</assign>
<msg timestamp="20190809 11:44:32.876" level="INFO">${dataToLoad} = Test12345</msg>
<status status="PASS" starttime="20190809 11:44:18.051" endtime="20190809 11:44:32.877"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>Enter First Name</arg>
</arguments>
<assign>
<var>${FirstName}</var>
</assign>
<msg timestamp="20190809 11:44:38.595" level="INFO">${FirstName} = Robert</msg>
<status status="PASS" starttime="20190809 11:44:32.877" endtime="20190809 11:44:38.596"></status>
</kw>
<kw name="Get Value From User" library="Dialogs">
<doc>Pauses test execution and asks user to input a value.</doc>
<arguments>
<arg>Enter Last Name</arg>
</arguments>
<assign>
<var>${LastName}</var>
</assign>
<msg timestamp="20190809 11:44:42.129" level="INFO">${LastName} = Hick</msg>
<status status="PASS" starttime="20190809 11:44:38.596" endtime="20190809 11:44:42.129"></status>
</kw>
<status status="PASS" starttime="20190809 11:44:18.050" endtime="20190809 11:44:42.130"></status>
</kw>
<kw name="Insert Record">
<tags>
<tag>TestDB</tag>
</tags>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>insert into TestTable (Name, TextData, Num) values ('${DATATOLOAD}','${DATATOLOAD}', 0)</arg>
</arguments>
<msg timestamp="20190809 11:44:42.132" level="INFO">Executing : Execute SQL String  |  insert into TestTable (Name, TextData, Num) values ('dataToLoad','dataToLoad', 0) </msg>
<status status="PASS" starttime="20190809 11:44:42.132" endtime="20190809 11:44:42.177"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>insert into Person (First_Name, Last_Name) values ('${FIRSTNAME}','${LASTNAME}')</arg>
</arguments>
<msg timestamp="20190809 11:44:42.178" level="INFO">Executing : Execute SQL String  |  insert into Person (First_Name, Last_Name) values ('FirstName','LastName') </msg>
<status status="PASS" starttime="20190809 11:44:42.178" endtime="20190809 11:44:42.182"></status>
</kw>
<status status="PASS" starttime="20190809 11:44:42.130" endtime="20190809 11:44:42.182"></status>
</kw>
<status status="PASS" starttime="20190809 11:44:18.049" endtime="20190809 11:44:42.182" critical="yes"></status>
</test>
<test id="s1-s1-s1-t2" name="Verify the Table Exists">
<kw name="Verify Table">
<tags>
<tag>DBTests</tag>
</tags>
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>TestTable</arg>
</arguments>
<msg timestamp="20190809 11:44:42.184" level="INFO">Executing : Table Must Exist  |  TestTable </msg>
<msg timestamp="20190809 11:44:42.184" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='TestTable' </msg>
<status status="PASS" starttime="20190809 11:44:42.183" endtime="20190809 11:44:42.675"></status>
</kw>
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>Person</arg>
</arguments>
<msg timestamp="20190809 11:44:42.682" level="INFO">Executing : Table Must Exist  |  Person </msg>
<msg timestamp="20190809 11:44:42.682" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='Person' </msg>
<status status="PASS" starttime="20190809 11:44:42.676" endtime="20190809 11:44:42.699"></status>
</kw>
<status status="PASS" starttime="20190809 11:44:42.183" endtime="20190809 11:44:42.699"></status>
</kw>
<status status="PASS" starttime="20190809 11:44:42.183" endtime="20190809 11:44:42.700" critical="yes"></status>
</test>
<test id="s1-s1-s1-t3" name="Verify the Table Records">
<kw name="Verify Records">
<tags>
<tag>DBTests</tag>
</tags>
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<arguments>
<arg>select * from Person where First_Name = '${FIRSTNAME}' and Last_Name = '${LASTNAME}'</arg>
</arguments>
<msg timestamp="20190809 11:44:42.702" level="INFO">Executing : Check If Exists In Database  |  select * from Person where First_Name = 'FirstName' and Last_Name = 'LastName' </msg>
<msg timestamp="20190809 11:44:42.702" level="INFO">Executing : Query  |  select * from Person where First_Name = 'FirstName' and Last_Name = 'LastName' </msg>
<status status="PASS" starttime="20190809 11:44:42.701" endtime="20190809 11:44:42.707"></status>
</kw>
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select * from Person</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20190809 11:44:42.708" level="INFO">Executing : Row Count Is Equal To X  |  select * from Person  |  1 </msg>
<msg timestamp="20190809 11:44:42.708" level="INFO">Executing : Row Count  |  select * from Person </msg>
<status status="PASS" starttime="20190809 11:44:42.707" endtime="20190809 11:44:42.710"></status>
</kw>
<kw name="Row Count Is 0" library="DatabaseLibrary">
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<arguments>
<arg>select * from Person where First_Name = '${DATATOLOAD}'</arg>
</arguments>
<msg timestamp="20190809 11:44:42.711" level="INFO">Executing : Row Count Is 0  |  select * from Person where First_Name = 'dataToLoad' </msg>
<msg timestamp="20190809 11:44:42.711" level="INFO">Executing : Row Count  |  select * from Person where First_Name = 'dataToLoad' </msg>
<status status="PASS" starttime="20190809 11:44:42.710" endtime="20190809 11:44:42.714"></status>
</kw>
<status status="PASS" starttime="20190809 11:44:42.701" endtime="20190809 11:44:42.714"></status>
</kw>
<status status="PASS" starttime="20190809 11:44:42.700" endtime="20190809 11:44:42.714" critical="yes"></status>
</test>
<kw name="Disconnect" type="teardown">
<tags>
<tag>TestDB</tag>
</tags>
<kw name="Delete All Rows From Table" library="DatabaseLibrary">
<doc>Delete all the rows within a given table. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>TestTable</arg>
</arguments>
<msg timestamp="20190809 11:44:42.716" level="INFO">Executing : Delete All Rows From Table  |  DELETE FROM TestTable; </msg>
<status status="PASS" starttime="20190809 11:44:42.715" endtime="20190809 11:44:42.719"></status>
</kw>
<kw name="Delete All Rows From Table" library="DatabaseLibrary">
<doc>Delete all the rows within a given table. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>Person</arg>
</arguments>
<msg timestamp="20190809 11:44:42.720" level="INFO">Executing : Delete All Rows From Table  |  DELETE FROM Person; </msg>
<status status="PASS" starttime="20190809 11:44:42.719" endtime="20190809 11:44:42.722"></status>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20190809 11:44:42.722" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20190809 11:44:42.722" endtime="20190809 11:44:42.723"></status>
</kw>
<status status="PASS" starttime="20190809 11:44:42.715" endtime="20190809 11:44:42.723"></status>
</kw>
<status status="PASS" starttime="20190809 11:44:17.856" endtime="20190809 11:44:42.723"></status>
</suite>
<status status="PASS" starttime="20190809 11:44:17.854" endtime="20190809 11:44:42.725"></status>
</suite>
<status status="PASS" starttime="20190809 11:44:17.830" endtime="20190809 11:44:42.727"></status>
</suite>
<statistics>
<total>
<stat pass="3" fail="0">Critical Tests</stat>
<stat pass="3" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="3" fail="0" id="s1" name="RobotProject1">RobotProject1</stat>
<stat pass="3" fail="0" id="s1-s1" name="TestSuitesFolder">RobotProject1.TestSuitesFolder</stat>
<stat pass="3" fail="0" id="s1-s1-s1" name="TestSuite3">RobotProject1.TestSuitesFolder.TestSuite3</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
